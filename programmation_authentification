boolean first = false;
boolean error = false;
boolean ouverture=false;
int NivSecu = 0;
int Agent;
String Animal = "Lion";
int code[4] = {1,2,3,4}; // code ouvrant le coffre 
int tableau_connexion[8] = {2,3,4,5,8,9,10,11}; // tableau contenant les pins de tout les boutons puis de toute les leds
int i = 0; // variable de suivi principale
int chiffre_tenter = 0; // variable principale contenant le chiffre tenté par l'utilisateur

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup()
{
  Serial.begin(9600);
  pinMode(tableau_connexion[0], INPUT_PULLUP); // configuration de tout les boutons : broche disponible dans le tableau (4 première valeurs)
  pinMode(tableau_connexion[1], INPUT_PULLUP);
  pinMode(tableau_connexion[2], INPUT_PULLUP);
  pinMode(tableau_connexion[3], INPUT_PULLUP); 
  
  pinMode(tableau_connexion[4], OUTPUT);// configuration de toutes les leds : broche disponible dans le tableau (4 dernières valeurs)
  pinMode(tableau_connexion[5], OUTPUT);
  pinMode(tableau_connexion[6], OUTPUT);
  pinMode(tableau_connexion[7], OUTPUT);
  
  pinMode(12, OUTPUT); // led verte
  pinMode(6, INPUT_PULLUP); // lecteur empreinte digitale
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop(){
  Serial.println("Validez les leds : ");
  
  while (i != 4){ // quand i = 4, c'est que les 4 chiffres de la combinaisons sont validés
      delay(300); // tempo pour eviter que un appui sois pris comme plusieur entrées
   
      activation_bouton(tableau_connexion[0]);
      activation_bouton(tableau_connexion[1]);
      activation_bouton(tableau_connexion[2]);
      activation_bouton(tableau_connexion[3]);
      
      if (chiffre_tenter != 0){// si il est égal à 0 c'est qu'aucun chiffre n'a été tenté
        
        if (chiffre_tenter == code[i]){
          //digitalWrite(tableau_connexion[i + 4], HIGH);
          Serial.println("allumage de la led sur la broche " + String(tableau_connexion[i + 4]));
          i = i + 1 ; // car un des chiffres de la combinaison est validé
          chiffre_tenter = 0;
          }
          
        else{ // si le chiffre entré par l'utilisateur n'est pas le bon
          erreur_code_ss_led();
          }
       } 
  } 
  digitalWrite(12, HIGH); // led verte allumé
  delay(1000);
  Serial.println("Niveau de sécurité ?");
{
  if(error==false && ouverture==false){
    while (NivSecu == 0){
      if (Serial.available()>1){
         NivSecu = Serial.parseInt();//recupere une chaine de caractere
      }
    }

    if (NivSecu > 5 || NivSecu < 0) {
      Serial.println("Ce niveau n existe pas ");  
    }
    else {
      if (NivSecu == 1){
        if (MA1()==true){
          Serial.println("1 ère étape validée");
          if (MA3()==true){
            Serial.println("2 ème étape validée");
            Serial.println("Ouverture du coffre");
            ouverture = true;
          }
          else{
            Serial.println("Erreur");
            error = true;
          }
        }
        else{
          Serial.println("Erreur");
          error = true;
        }
      }
      else if (NivSecu == 2){
        if (MA1()==true){
           Serial.println("1 ère étape validée");
           if (MA4()==true){
             Serial.println("2 ème étape validée");
             Serial.println("Ouverture du coffre");
             ouverture = true;
          }
          else{
             Serial.println("Erreur");
             error = true;
          }
        }
        else{
          Serial.println("Erreur");
          error = true;
        }
      }
      else if (NivSecu == 3){
        if (MA2()==true){
          Serial.println("1 ère étape validée");
          if (MA5()==true){
            Serial.println("2 ème étape validée");
            Serial.println("Ouverture du coffre");
            ouverture = true;
          }
          else{
            Serial.println("Erreur");
            error = true;
          }
        }
        else{
          Serial.println("Erreur");
          error = true;
        }
     }
      else if (NivSecu == 4){
        if (MA2()==true){
          Serial.println("1 ère étape validée");
          if (MA3()==true){
            Serial.println("2 ème étape validée");
            if (MA4()==true){
               Serial.println("3 ème étape validée");
               Serial.println("Ouverture du coffre");
               ouverture = true;
            }
            else{
               Serial.println("Erreur");
               error = true;
            }
          }
          else{
            Serial.println("Erreur");
            error = true;
          }
        }
        else{
          Serial.println("Erreur");
          error = true;
        }
      }
      else if (NivSecu == 5){
        if (MA1()==true){
          Serial.println("1 ère étape validée");
          if (MA2()==true){
            Serial.println("2 ème étape validée");
            if (MA3()==true){
                Serial.println("3 ème étape validée");
                if (MA5()==true){
                  Serial.println("4ème étape validée");
                  Serial.println("Ouverture du coffre");
                  ouverture = true;
                }
                else{
                   Serial.println("Erreur");
                   error = true;
                }
             }
             else{
               Serial.println("Erreur");
               error = true;
             }
          }
          else{
            Serial.println("Erreur");
            error = true;
          }
        }
        else{
          Serial.println("Erreur");
          error = true;
        }
      }
    }
  }
}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Secu 1//////////////////////////////////////////////////////////////////////////////////
// fonction qui renvoie le chiffre entré par l'utilisateur en fonction du bouton appuyé
void activation_bouton(int btn){
  if (digitalRead(btn) == LOW) {
    chiffre_tenter = btn - 1; 
    }
}

// fonction activant le clignotement des leds quand le chiffre entré est faux
void erreur_code(){ 
  i = 0;
  int a = 0;
  chiffre_tenter = 0;
  while (a !=3){ // car les leds clignotents 3 fois
    digitalWrite(tableau_connexion[4], HIGH);
    digitalWrite(tableau_connexion[5], HIGH);
    digitalWrite(tableau_connexion[6], HIGH);
    digitalWrite(tableau_connexion[7], HIGH);
    delay(500);
    digitalWrite(tableau_connexion[4], LOW);
    digitalWrite(tableau_connexion[5], LOW);
    digitalWrite(tableau_connexion[6], LOW);
    digitalWrite(tableau_connexion[7], LOW);
    delay(500);
    a = a + 1;
    }
  }
void erreur_code_ss_led(){
  Serial.println("erreur code");
  i = 0;
  chiffre_tenter = 0;
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int MA1(){
  int carte[4] = {2, 2, 2, 2};
  int temp = 0;
  Serial.println("Quel est votre nom ?");
  Serial.println("BOND : 0");
  Serial.println("COLBY : 1");
  Serial.println("BLAKE : 2"); 
  Serial.println("PHILBY : 3" );
  Serial.println( "SMITH : 4");
  Serial.println("JAMES : 5");
  Serial.println("MORTON : 6");
  Serial.println("JACKSON : 7");
  Serial.println("SCOTT : 8");
  Serial.println("EVANS : 9" );
  Serial.println("LEWIS : 10");
  Serial.println("MAY : 11");
  Serial.println("WALKER : 12");
  Serial.println("ADAMS : 13");
  Serial.println("OLIVER : 14");
  Serial.println("BAKER : 15");
  
  if (Serial.available()>1){
      int f = Serial.parseInt();
      if (f == carte[0]){
        temp = temp + 1;
        }
  }
    
  
  boolean g = false;
  while (temp<4){
    if (Serial.available()>1){//active MA1
      int f = Serial.parseInt();
      if (temp == 3) {
        g=MA1Bis(f, temp);
        temp +=1;
      }
      else {
        MA1Bis(f, temp);
        temp +=1;
      }
    }
  } 
  return g;
}

int MA1Bis(int chiffre, int num){
  boolean h = false;
  Serial.println(num);
  int TabAgent[16] = {248, 1411, 3563, 4065, 4597, 6395, 7340,7880, 9233, 10014, 10250, 12439, 12716, 13704, 14023, 15442};
  if (num == 0){
      Agent = chiffre * 1000;
      Serial.println("Quel est votre prénom ?");
      Serial.println("Alexandre : 0");
      Serial.println("Jean-Marie : 1");
      Serial.println("Henri : 2");
      Serial.println("Louis : 3");
      Serial.println("Tony : 4");
      Serial.println("Gael : 5");
      Serial.println("Jack : 6");
      Serial.println("Theo : 7");
      Serial.println("Adam : 8");
      Serial.println("Leo : 9");
      Serial.println("Simon : 10");
      Serial.println("William : 11");
      Serial.println("Loic : 12");
      Serial.println("Paul : 13");
      Serial.println("Charles : 14");
      Serial.println("Tom : 15");
      
  }
  else if (num == 1){
      Agent = Agent + chiffre * 100;
      Serial.println("Quelle est votre date de naissance ?");
      String TabNai[16] = {"16/06/82 : 0", "30/05/86 : 1", "15/04/83 : 2", "21/08/85 : 3", "17/03/84 : 4", "02/01/88 : 5", "17/09/81 : 6", "20/12/82 : 7", "26/11/90 : 8", "18/08/80 : 9", "05/04/83 : 10", "03/10/85 : 11", "22/07/84 : 12", "07/12/86 : 13", "21/11/89 : 14", "31/03/90 : 15"};
    for(int i = 0; i<16; i++){
        Serial.println(TabNai[i]);
      }
  }
  else if (num == 2){
      Agent = Agent + chiffre * 10;
      Serial.println("Veuillez saisir votre numero de matricule");
      String TabMat[16] = {"007 : 0", "004 : 1", "009 : 2", "002 : 3", "001 : 4", "012 : 5", "035 : 6", "008 : 7", "079 : 8", "003 : 9", "028 : 10", "046 : 11", "005 : 12", "092 : 13", "083 : 14", "006 : 15"};
      for(int i = 0; i<16; i++){
        Serial.println(TabMat[i]);
      }
  }
  else if (num == 3){
      Agent = Agent + chiffre;
    for(int compteur = 0; compteur<16; compteur++){
      if (TabAgent[compteur]==Agent){
      h=true;
    }
    }
    return h;
  }
}

/////////////////////////////////////////////////////////////////////////////MA2//////////////////////////////////////////////////////////////////////////////////
int MA2(){
  int e, M, C;
  int Mp = 0;
  boolean first, second = false;
  Serial.println("Identifiez-vous :");
  randomSeed(analogRead(0));//permet de changer de variable aléatoire
  String x = "";
  while (x == ""){
     x = Serial.readString();//recupere une chaine de caractere
  }
  e = CleAgent(x);
  M = random(2881);//nombre aléatoire
  C = Modexp(M,e,2881);
  Serial.print("Message a dechiffrer :");
  Serial.println(C);
  Serial.println("Entrez le message :");
  while (Mp == 0){
      Mp = Serial.parseInt();//recupere un entier dans la console
  } 
  if (M==Mp){
    Serial.print("Vous êtes authentifié! Bienvenue agent ");
    Serial.println(x);
    return true;
  }
  else {
    Serial.println("Erreur d'authentification, le système de sécutité se déclenchera dans 5 secondes");
    return false;
  }
}
int Modexp(float a, int e, float n){
  float r;
  if (e<0){
    Serial.println("unhandled case");
    exit(1);
  }
  else if ((a==0)||(n==1)){
    r = 0;
  }
  else {  
    r = 1;
    while (e>0){
      r = fmod((r*fmod(a,n)),n); 
      e=e-1;
    }
  }
  return r;
}

int CleAgent(String x){//recupere la cle publique de l'agent
  
    int ClePublicAgent[16] = {601,619,631,641,647,653,661,673,691,701,733,739,751,797,809,811};
    String NomAgent = "ABCDEFHIJKLMNOPQ";
    int i = 0;
    int cle = 0;
    
    for(i=0; i<(NomAgent.length()); i++)
    {
        if(String(NomAgent[i]) == x)//dès que ma lettre coincide, je recupere la position
        {
            // alors on l'enregistre
            cle = ClePublicAgent[i];//j'utilise la position pour recupere la clé
        }
    }
    return cle;
}
//////////////////////////////////////////////////////////////////////////////MA3//////////////////////////////////////////////////////////////////////////////////
int MA3(){
  bool entree = false;
  bool retine;
  bool oeil;
  
  Serial.println("le scan retinien va commencer, veuillez regarder la camera");
  while (entree == false){
    if (Serial.available()>1){
      entree = true;
      oeil = Serial.readString();
    }

  }
  if (oeil==true)
  {
    Serial.println("oeil reconnue");
    retine=true;
  }
  else
  {
    Serial.println("oeil non reconnue");
  }
  return retine;
}
/////////////////////////////////////////////////////////////////////////////MA4//////////////////////////////////////////////////////////////////////////////////
bool MA4(){ // reconnaissance digital simulé par un bouton branché sur le pin 6
  Serial.println("le scan digital va commencer, veuillez appuyez sur le bouton rouge");
  while (digitalRead(6) == HIGH) {
    delay(500);
    }
  Serial.println("doight reconnu");
  return true;
}
/////////////////////////////////////////////////////////////////////////////MA5//////////////////////////////////////////////////////////////////////////////////
int MA5(){
  String a[16] = {"Taureau", "Lion", "Verseau", "Belier", "Sagitaire", "Poisson", "Poisson", "Vierge", "Gémeaux", "Cancer", "Balance", "Scorpion", "Capricorne", "Papillon", "Lynx", "Ours" };
  boolean id=false;
  boolean entree = false;
  Serial.print("Votre Carte ID est:");
  while (entree == false){
    if (Serial.available()>1){
      entree = true;
      int x = Serial.parseInt();
      if (Animal == a[x-1]){
        Serial.print("exact");
        id=true;
      }
      else{
        Serial.print("non exact");
        id=false;
      }
    }
  }

  return id;
}
